version: "3"
services:

  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:  # cấu hình deploy service trên swarm, không hoạt động khi sử dụng docker-compose
      replicas: 1  # số lượng container sẽ chạy trên các node worker
      update_config: # cấu hình update được áp dụng khi cập nhật service
        parallelism: 2 # số lượng container cập nhật cùng lúc
        delay: 10s # thời gian delay giữa các lần cập nhật
      restart_policy: # cấu hình restart khi container theo điều kiện nào
        condition: on-failure # điều kiện restart khi container bị lỗi
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    deploy:
      placement: # service này sẽ được chạy trên node nào manager
        constraints: [node.role == manager]
  vote:
    image: hiep4hiep/votingapp_vote
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: hiep4hiep/votingapp_result
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: hiep4hiep/votingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated # chế độ chạy container theo số lượng
      replicas: 1
      labels: [APP=VOTING] # label của service
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s # thời gian cửa sổ để xác định số lần thử lại
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer
    ports:
      - 8080:8080
    stop_grace_period: 1m30s
    networks:
      - frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:
